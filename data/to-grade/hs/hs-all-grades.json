[{"snippet": ["class Archmage(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Archmage\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\n\n    def create_minion (self, player) :\n        return Minion(4, 7, spell_damage = 1)"], "gcnn": "class Archmage(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Archmage\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\n\n    def create_minion (self, player) :\n        return Minion(4, 7, spell_damage = 1)", "nl2code": "class Archmage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage', 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON\n            )\n\n    def create_minion(self, player):\n        return Minion(4, 7, spell_damage=1)", "grade-gcnn": 4, "grade-nl2code": 4, "rougel-gcnn": 1.0, "rougel-nl2code": 1.0, "bleu-gcnn": 1.0, "bleu-nl2code": 1.0, "chrf-gcnn": 1.0, "chrf-nl2code": 0.959, "meteor-gcnn": 1.0, "meteor-nl2code": 1.0, "codebleu-gcnn": 1.0, "codebleu-nl2code": 0.979, "ruby-gcnn": 1.0, "ruby-nl2code": 1.0}, {"snippet": ["class BootyBayBodyguard(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Booty Bay Bodyguard\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\n\n    def create_minion (self, player) :\n        return Minion(5, 4, taunt = True)"], "gcnn": "class BootyBayBodyguard(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Booty Bay Bodyguard\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\n\n    def create_minion (self, player) :\n        return Minion(5, 4, taunt = True)", "nl2code": "class BootyBayBodyguard(MinionCard):\n\n    def __init__(self):\n        super().__init__('Booty Bay Bodyguard', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(5, 4, taunt=True)", "grade-gcnn": 4, "grade-nl2code": 4, "rougel-gcnn": 1.0, "rougel-nl2code": 0.982, "bleu-gcnn": 1.0, "bleu-nl2code": 0.953, "chrf-gcnn": 1.0, "chrf-nl2code": 0.952, "meteor-gcnn": 1.0, "meteor-nl2code": 0.982, "codebleu-gcnn": 1.0, "codebleu-nl2code": 0.973, "ruby-gcnn": 1.0, "ruby-nl2code": 0.966}, {"snippet": ["class DarkscaleHealer(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Darkscale Healer\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry = Battlecry(Heal(2), CharacterSelector()))\n\n    def create_minion (self, player) :\n        return Minion(4, 5)"], "gcnn": "class DarkscaleHealer(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Darkscale Healer\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry = Battlecry(Heal(2), HeroSelector()))\n\n    def create_minion (self, player) :\n        return Minion(4, 5)", "nl2code": "class DarkscaleHealer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Darkscale Healer', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(2),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)", "grade-gcnn": 3, "grade-nl2code": 3, "rougel-gcnn": 0.985, "rougel-nl2code": 0.895, "bleu-gcnn": 0.96, "bleu-nl2code": 0.787, "chrf-gcnn": 0.954, "chrf-nl2code": 0.9, "meteor-gcnn": 0.985, "meteor-nl2code": 0.905, "codebleu-gcnn": 0.992, "codebleu-nl2code": 0.867, "ruby-gcnn": 0.993, "ruby-nl2code": 0.77}, {"snippet": ["class FieryWarAxe(WeaponCard ) : \n    def __init__ (self) :\n        super().__init__(\"Fiery War Axe\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.FREE)\n\n    def create_weapon (self, player) :\n        return Weapon(3, 2)"], "gcnn": "class FieryWarAxe(WeaponCard ) : \n    def __init__ (self) :\n        super().__init__(\"Fiery War Axe\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.FREE)\n\n    def create_weapon (self, player) :\n        return Weapon(3, 2)", "nl2code": "class FieryWar(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Fiery War', 3, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE, False)\n\n    def create_weapon(self, player):\n        return Weapon(3, 3)", "grade-gcnn": 4, "grade-nl2code": 3, "rougel-gcnn": 1.0, "rougel-nl2code": 0.923, "bleu-gcnn": 1.0, "bleu-nl2code": 0.785, "chrf-gcnn": 1.0, "chrf-nl2code": 0.87, "meteor-gcnn": 1.0, "meteor-nl2code": 0.916, "codebleu-gcnn": 1.0, "codebleu-nl2code": 0.866, "ruby-gcnn": 1.0, "ruby-nl2code": 0.894}, {"snippet": ["class FrostwolfWarlord(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Frostwolf Warlord\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry = Battlecry(Give([Buff(ChangeAttack(Count(MinionSelector()))), Buff(ChangeHealth(Count(MinionSelector())))]), SelfSelector()))\n\n    def create_minion (self, player) :\n        return Minion(4, 4)"], "gcnn": "class FrostwolfWarlord(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Frostwolf Warlord\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry = Battlecry(Transform(CobraForm()), SelfSelector()))\n\n    def create_minion (self, player) :\n        return Minion(4, 4)", "nl2code": "class FrostwolfWarlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Warlord', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(Buff(ChangeAttack(\n            Count(MinionSelector(MinionHason(), EnemyPlayer()))))),\n            MinionSelector(IsType(MINION_TYPE.MURLOC), value=0)))\n\n    def create_minion(self, player):\n        return Minion(4, 4)", "grade-gcnn": 2, "grade-nl2code": 2, "rougel-gcnn": 0.798, "rougel-nl2code": 0.829, "bleu-gcnn": 0.613, "bleu-nl2code": 0.765, "chrf-gcnn": 0.732, "chrf-nl2code": 0.813, "meteor-gcnn": 0.676, "meteor-nl2code": 0.771, "codebleu-gcnn": 0.372, "codebleu-nl2code": 0.599, "ruby-gcnn": 0.723, "ruby-nl2code": 0.784}, {"snippet": ["class Hellfire(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Hellfire\", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.FREE)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        \n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        targets.append(game.other_player.hero)\n        targets.append(game.current_player.hero)\n        for minion in targets: \n            minion.damage(player.effective_spell_damage(3), self)"], "gcnn": "class Hellfire(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Hellfire\", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.FREE, target_func = hearthbreaker.targeting.find_spell_target)\n\n    def use (self, player, game) :\n        super().use(player, game)", "nl2code": "class Hellfire(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hellfire', 4, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(3), self)", "grade-gcnn": 2, "grade-nl2code": 3, "rougel-gcnn": 0.609, "rougel-nl2code": 0.798, "bleu-gcnn": 0.365, "bleu-nl2code": 0.629, "chrf-gcnn": 0.498, "chrf-nl2code": 0.668, "meteor-gcnn": 0.412, "meteor-nl2code": 0.673, "codebleu-gcnn": 0.259, "codebleu-nl2code": 0.554, "ruby-gcnn": 0.646, "ruby-nl2code": 0.803}, {"snippet": ["class Innervate(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Innervate\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        if  player.mana < 8 : \n            player.mana += 2\n\n        else : \n            player.mana = 10"], "gcnn": "class Innervate(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Innervate\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE, target_func = hearthbreaker.targeting.find_spell_target)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        self.target.silence()", "nl2code": "class Innervate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Innervate', 0, CHARACTER_CLASS.DRUID, CARD_RARITY\n            .FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_temp_attack(2)\n        player.hero.change_temp_attack(minion)", "grade-gcnn": 1, "grade-nl2code": 1, "rougel-gcnn": 0.78, "rougel-nl2code": 0.817, "bleu-gcnn": 0.711, "bleu-nl2code": 0.74, "chrf-gcnn": 0.762, "chrf-nl2code": 0.764, "meteor-gcnn": 0.536, "meteor-nl2code": 0.625, "codebleu-gcnn": 0.501, "codebleu-nl2code": 0.684, "ruby-gcnn": 0.645, "ruby-nl2code": 0.817}, {"snippet": ["class MagmaRager(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Magma Rager\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)\n\n    def create_minion (self, player) :\n        return Minion(5, 1)"], "gcnn": "class MagmaRager(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Magma Rager\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)\n\n    def create_minion (self, player) :\n        return Minion(5, 1)", "nl2code": "class MagmaRager(MinionCard):\n\n    def __init__(self):\n        super().__init__('Magma Rager', 3, CHARACTER_CLASS.ALL, CARD_RARITY\n            .FREE)\n\n    def create_minion(self, player):\n        return Minion(5, 1)", "grade-gcnn": 4, "grade-nl2code": 4, "rougel-gcnn": 1.0, "rougel-nl2code": 1.0, "bleu-gcnn": 1.0, "bleu-nl2code": 1.0, "chrf-gcnn": 1.0, "chrf-nl2code": 0.956, "meteor-gcnn": 1.0, "meteor-nl2code": 1.0, "codebleu-gcnn": 1.0, "codebleu-nl2code": 0.978, "ruby-gcnn": 1.0, "ruby-nl2code": 1.0}, {"snippet": ["class MortalCoil(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Mortal Coil\", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func = hearthbreaker.targeting.find_minion_spell_target)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        if  self.target.health <= player.effective_spell_damage(1) and  not self.target.divine_shield : \n            self.target.damage(player.effective_spell_damage(1), self)\n            player.draw()\n\n        else : self.target.damage(player.effective_spell_damage(1), self)"], "gcnn": "class MortalCoil(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Mortal Coil\", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func = hearthbreaker.targeting.find_minion_spell_target)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        self.target.damage(1, self)\n        player.effective_spell_damage(1)", "nl2code": "class MortalCoil(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mortal Coil', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        target.append(player.hero)", "grade-gcnn": 2, "grade-nl2code": 2, "rougel-gcnn": 0.786, "rougel-nl2code": 0.732, "bleu-gcnn": 0.551, "bleu-nl2code": 0.501, "chrf-gcnn": 0.678, "chrf-nl2code": 0.593, "meteor-gcnn": 0.524, "meteor-nl2code": 0.46, "codebleu-gcnn": 0.44, "codebleu-nl2code": 0.395, "ruby-gcnn": 0.788, "ruby-nl2code": 0.783}, {"snippet": ["class Polymorph(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Polymorph\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.FREE, target_func = hearthbreaker.targeting.find_minion_spell_target)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        from hearthbreaker.cards.minions.mage import Sheep\n        \n        sheep = Sheep()\n        \n        minion = sheep.create_minion(None)\n        \n        minion.card = sheep\n        self.target.replace(minion)"], "gcnn": "class Polymorph(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Polymorph\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.FREE, target_func = hearthbreaker.targeting.find_minion_spell_target)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        self.target.die(self)", "nl2code": "class Polymorph(SpellCard):\n\n    def __init__(self):\n        super().__init__('Polymorph', 4, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        frog = hearthbreaker.cards.minions.minion_type.minion_type()\n        minion.player = player\n        self.target.Summon('card_drawn', self)\n        player.draw()", "grade-gcnn": 2, "grade-nl2code": 2, "rougel-gcnn": 0.807, "rougel-nl2code": 0.819, "bleu-gcnn": 0.616, "bleu-nl2code": 0.734, "chrf-gcnn": 0.695, "chrf-nl2code": 0.774, "meteor-gcnn": 0.611, "meteor-nl2code": 0.697, "codebleu-gcnn": 0.568, "codebleu-nl2code": 0.677, "ruby-gcnn": 0.786, "ruby-nl2code": 0.924}, {"snippet": ["class SearingTotem(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Searing Totem\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\n\n    def create_minion (self, player) :\n        return Minion(1, 1)"], "gcnn": "class SearingTotem(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Searing Totem\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\n\n    def create_minion (self, player) :\n        return Minion(1, 1)", "nl2code": "class SearingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Searing Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(1, 1)", "grade-gcnn": 4, "grade-nl2code": 4, "rougel-gcnn": 1.0, "rougel-nl2code": 1.0, "bleu-gcnn": 1.0, "bleu-nl2code": 1.0, "chrf-gcnn": 1.0, "chrf-nl2code": 0.963, "meteor-gcnn": 1.0, "meteor-nl2code": 1.0, "codebleu-gcnn": 1.0, "codebleu-nl2code": 0.98, "ruby-gcnn": 1.0, "ruby-nl2code": 1.0}, {"snippet": ["class SilverbackPatriarch(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Silverback Patriarch\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type = MINION_TYPE.BEAST)\n\n    def create_minion (self, player) :\n        return Minion(1, 4, taunt = True)"], "gcnn": "class SilverbackPatriarch(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Silverback Patriarch\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type = MINION_TYPE.BEAST)\n\n    def create_minion (self, player) :\n        return Minion(1, 4, taunt = True)", "nl2code": "class SilverbackPatriarch(MinionCard):\n\n    def __init__(self):\n        super().__init__('Silverback Patriarch', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 4, taunt=True)", "grade-gcnn": 4, "grade-nl2code": 4, "rougel-gcnn": 0.984, "rougel-nl2code": 1.0, "bleu-gcnn": 0.954, "bleu-nl2code": 1.0, "chrf-gcnn": 0.987, "chrf-nl2code": 0.968, "meteor-gcnn": 0.995, "meteor-nl2code": 1.0, "codebleu-gcnn": 0.927, "codebleu-nl2code": 0.981, "ruby-gcnn": 0.919, "ruby-nl2code": 1.0}, {"snippet": ["class StormwindKnight(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Stormwind Knight\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\n\n    def create_minion (self, player) :\n        return Minion(2, 5, charge = True)"], "gcnn": "class StormwindKnight(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Stormwind Knight\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\n\n    def create_minion (self, player) :\n        return Minion(2, 5, charge = True)", "nl2code": "class StormwindKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Stormwind Knight', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 5, charge=True)", "grade-gcnn": 4, "grade-nl2code": 4, "rougel-gcnn": 1.0, "rougel-nl2code": 1.0, "bleu-gcnn": 1.0, "bleu-nl2code": 1.0, "chrf-gcnn": 1.0, "chrf-nl2code": 0.962, "meteor-gcnn": 1.0, "meteor-nl2code": 1.0, "codebleu-gcnn": 1.0, "codebleu-nl2code": 0.979, "ruby-gcnn": 1.0, "ruby-nl2code": 1.0}, {"snippet": ["class VoodooDoctor(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Voodoo Doctor\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, battlecry = Battlecry(Heal(2), CharacterSelector( players = BothPlayer(), picker = UserPicker())))\n\n    def create_minion (self, player) :\n        return Minion(2, 1)"], "gcnn": "class VoodooDoctor(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Voodoo Doctor\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, battlecry = Battlecry(Heal(2), CharacterSelector( players = BothPlayer(), picker = UserPicker())))\n\n    def create_minion (self, player) :\n        return Minion(2, 1)", "nl2code": "class VoodooDoctor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Voodoo Doctor', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, battlecry=Battlecry(Heal(1),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 1)", "grade-gcnn": 4, "grade-nl2code": 3, "rougel-gcnn": 1.0, "rougel-nl2code": 0.987, "bleu-gcnn": 1.0, "bleu-nl2code": 0.967, "chrf-gcnn": 1.0, "chrf-nl2code": 0.958, "meteor-gcnn": 1.0, "meteor-nl2code": 0.987, "codebleu-gcnn": 1.0, "codebleu-nl2code": 0.973, "ruby-gcnn": 1.0, "ruby-nl2code": 0.976}, {"snippet": ["class WrathOfAirTotem(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Wrath of Air Totem\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\n\n    def create_minion (self, player) :\n        return Minion(0, 2, spell_damage = 1)"], "gcnn": "class WrathOfAirTotem(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Wrath of Air Totem\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\n\n    def create_minion (self, player) :\n        return Minion(0, 2, spell_damage = 1)", "nl2code": "class WrathOfAirTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wrath of Air Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 2, spell_damage=1)", "grade-gcnn": 4, "grade-nl2code": 4, "rougel-gcnn": 1.0, "rougel-nl2code": 1.0, "bleu-gcnn": 1.0, "bleu-nl2code": 1.0, "chrf-gcnn": 1.0, "chrf-nl2code": 0.967, "meteor-gcnn": 1.0, "meteor-nl2code": 1.0, "codebleu-gcnn": 1.0, "codebleu-nl2code": 0.981, "ruby-gcnn": 1.0, "ruby-nl2code": 1.0}, {"snippet": ["class AstralCommunion(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Astral Communion\", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        for card in player.hand: \n            card.unattach()\n            player.trigger(\"card discarded\", card)\n \n        \n            player.hand = [elts]\n        \n            player.max_mana = 10\n        \n            player.mana = 10"], "gcnn": "class AstralCommunion(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Astral Communion\", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions): \n            minion.extend(len(player.minions))", "nl2code": "class AstralCommunion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Astral Communion', 4, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.EPIC, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.draw()", "grade-gcnn": 2, "grade-nl2code": 2, "rougel-gcnn": 0.731, "rougel-nl2code": 0.752, "bleu-gcnn": 0.607, "bleu-nl2code": 0.525, "chrf-gcnn": 0.676, "chrf-nl2code": 0.621, "meteor-gcnn": 0.49, "meteor-nl2code": 0.487, "codebleu-gcnn": 0.632, "codebleu-nl2code": 0.441, "ruby-gcnn": 0.739, "ruby-nl2code": 0.649}, {"snippet": ["class AnnoyoTron(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Annoy-o-Tron\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type = MINION_TYPE.MECH)\n\n    def create_minion (self, player) :\n        return Minion(1, 2, divine_shield = True, taunt = True)"], "gcnn": "class AnnoyoTron(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Annoy-o-Tron\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type = MINION_TYPE.MECH)\n\n    def create_minion (self, player) :\n        return Minion(1, 2, divine_shield = True, buffs = [Buff(Charge())])", "nl2code": "class Annoy-o-Tron(MinionCard):\n\n    def __init__(self):\n        super().__init__('Annoy-o-Tron', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 2, divine_shield=True, taunt=True)", "grade-gcnn": 3, "grade-nl2code": 4, "rougel-gcnn": 0.922, "rougel-nl2code": 0.964, "bleu-gcnn": 0.855, "bleu-nl2code": 0.931, "chrf-gcnn": 0.946, "chrf-nl2code": 0.952, "meteor-gcnn": 0.929, "meteor-nl2code": 0.981, "codebleu-gcnn": 0.888, "codebleu-nl2code": 0.567, "ruby-gcnn": 0.935, "ruby-nl2code": 0.943}, {"snippet": ["class BurlyRockjawTrogg(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Burly Rockjaw Trogg\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\n\n    def create_minion (self, player) :\n        return Minion(3, 5, effects = [Effect(SpellCast( player = EnemyPlayer()), ActionTag(Give(ChangeAttack(2)), SelfSelector()))])"], "gcnn": "class BurlyRockjawTrogg(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Burly Rockjaw Trogg\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\n\n    def create_minion (self, player) :\n        return Minion(3, 5, effects = [Effect(SpellCast( player = EnemyPlayer()), ActionTag(Give(ChangeAttack(2)), SelfSelector()))])", "nl2code": "class BurlyRockjawTrogg(MinionCard):\n\n    def __init__(self):\n        super().__init__('Burly Rockjaw Trogg', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(3, 5, effects=[Effect(SpellCast(player=EnemyPlayer()),\n            ActionTag(Give(ChangeAttack(2)), SelfSelector()))])", "grade-gcnn": 4, "grade-nl2code": 4, "rougel-gcnn": 1.0, "rougel-nl2code": 1.0, "bleu-gcnn": 1.0, "bleu-nl2code": 1.0, "chrf-gcnn": 1.0, "chrf-nl2code": 0.974, "meteor-gcnn": 1.0, "meteor-nl2code": 1.0, "codebleu-gcnn": 1.0, "codebleu-nl2code": 0.981, "ruby-gcnn": 1.0, "ruby-nl2code": 1.0}, {"snippet": ["class CogmastersWrench(WeaponCard ) : \n    def __init__ (self) :\n        super().__init__(\"Cogmaster's Wrench\", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC)\n\n    def create_weapon (self, player) :\n        return Weapon(1, 3, buffs = [Buff(ChangeAttack(2), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))), value = 0))])"], "gcnn": "class CogmastersWrench(WeaponCard ) : \n    def __init__ (self) :\n        super().__init__(\"Cogmaster's Wrench\", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC)\n\n    def create_weapon (self, player) :\n        return Weapon(1, 3)", "nl2code": "class CogmasterWrench(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Cogmaster Wrench', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(1, 1, auras=[Aura(ChangeAttack(2), WeaponSelector())])", "grade-gcnn": 2, "grade-nl2code": 2, "rougel-gcnn": 0.743, "rougel-nl2code": 0.795, "bleu-gcnn": 0.493, "bleu-nl2code": 0.559, "chrf-gcnn": 0.685, "chrf-nl2code": 0.698, "meteor-gcnn": 0.496, "meteor-nl2code": 0.549, "codebleu-gcnn": 0.505, "codebleu-nl2code": 0.658, "ruby-gcnn": 0.736, "ruby-nl2code": 0.818}, {"snippet": ["class EchoOfMedivh(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Echo of Medivh\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        for minion in sorted(copy.copy(player.minions), key =  lambda  minion : \n            minion.born\n): \n            if  len(player.hand) < 10 : \n                player.hand.append(minion.card)"], "gcnn": "class EchoOfMedivh(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Echo of Medivh\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions): \n            if  len(game.other_player.minions) is not game.other_player.hand : \n                player.append(len(player.minions))", "nl2code": "class EchoOfMedivh(SpellCard):\n\n    def __init__(self):\n        super().__init__('Echo of Medivh', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for player in game.players:\n            minions = [card for card in player.hand if card.is_minion()]\n            if len(Add) and PlayerSelector():\n                minion_card = game.random_choice(minions)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7", "grade-gcnn": 2, "grade-nl2code": 2, "rougel-gcnn": 0.8, "rougel-nl2code": 0.641, "bleu-gcnn": 0.731, "bleu-nl2code": 0.529, "chrf-gcnn": 0.798, "chrf-nl2code": 0.708, "meteor-gcnn": 0.748, "meteor-nl2code": 0.562, "codebleu-gcnn": 0.726, "codebleu-nl2code": 0.667, "ruby-gcnn": 0.928, "ruby-nl2code": 0.817}, {"snippet": ["class FloatingWatcher(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Floating Watcher\", 5, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type = MINION_TYPE.DEMON)\n\n    def create_minion (self, player) :\n        return Minion(4, 4, effects = [Effect(CharacterDamaged(and(IsHero(), OwnersTurn())), ActionTag(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector()))])"], "gcnn": "class FloatingWatcher(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Floating Watcher\", 5, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type = MINION_TYPE.DEMON)\n\n    def create_minion (self, player) :\n        return Minion(4, 4, effects = [Effect(TurnEnded(), ActionTag(Give(ChangeAttack(2)), SelfSelector()))])", "nl2code": "class FloatingWatcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Floating Watcher', 5, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(4, 4, effects=[Effect(Damaged(), ActionTag(Give([Buff\n            (ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector()))])", "grade-gcnn": 2, "grade-nl2code": 4, "rougel-gcnn": 0.859, "rougel-nl2code": 0.938, "bleu-gcnn": 0.699, "bleu-nl2code": 0.856, "chrf-gcnn": 0.814, "chrf-nl2code": 0.883, "meteor-gcnn": 0.693, "meteor-nl2code": 0.865, "codebleu-gcnn": 0.673, "codebleu-nl2code": 0.819, "ruby-gcnn": 0.75, "ruby-nl2code": 0.884}, {"snippet": ["class GnomishExperimenter(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Gnomish Experimenter\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry = Battlecry(Draw(), PlayerSelector()), Battlecry(Transform(GnomishChicken()), LastDrawnSelector(), Matches(LastDrawnSelector(), IsMinion())))\n\n    def create_minion (self, player) :\n        return Minion(3, 2)"], "gcnn": "class GnomishExperimenter(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Gnomish Experimenter\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry = Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion (self, player) :\n        return Minion(3, 2)", "nl2code": "class GnomishExperimenter(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Experimenter', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)", "grade-gcnn": 2, "grade-nl2code": 2, "rougel-gcnn": 0.805, "rougel-nl2code": 0.805, "bleu-gcnn": 0.616, "bleu-nl2code": 0.616, "chrf-gcnn": 0.735, "chrf-nl2code": 0.711, "meteor-gcnn": 0.624, "meteor-nl2code": 0.624, "codebleu-gcnn": 0.629, "codebleu-nl2code": 0.624, "ruby-gcnn": 0.674, "ruby-nl2code": 0.674}, {"snippet": ["class IronJuggernaut(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Iron Juggernaut\", 6, CHARACTER_CLASS.WARRIOR, CARD_RARITY.LEGENDARY, minion_type = MINION_TYPE.MECH, battlecry = Battlecry(AddCard(BurrowingMine(), add_to_deck = True), PlayerSelector(EnemyPlayer())))\n\n    def create_minion (self, player) :\n        return Minion(6, 5)"], "gcnn": "class IronJuggernaut(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Iron Juggernaut\", 6, CHARACTER_CLASS.WARRIOR, CARD_RARITY.LEGENDARY, minion_type = MINION_TYPE.MECH)\n\n    def create_minion (self, player) :\n        return Minion(6, 5, battlecry = Deathrattle(AddCard(CardQuery( source = CARD_SOURCE.LIST, source_list = spare_part_list)), PlayerSelector()))", "nl2code": "class IronJuggernaut(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Juggernaut', 6, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Summon(Mine10(), PlayerSelector()), MinionSelector(\n            players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)", "grade-gcnn": 2, "grade-nl2code": 3, "rougel-gcnn": 0.695, "rougel-nl2code": 0.898, "bleu-gcnn": 0.758, "bleu-nl2code": 0.84, "chrf-gcnn": 0.802, "chrf-nl2code": 0.844, "meteor-gcnn": 0.717, "meteor-nl2code": 0.913, "codebleu-gcnn": 0.79, "codebleu-nl2code": 0.843, "ruby-gcnn": 0.762, "ruby-nl2code": 0.854}, {"snippet": ["class MadderBomber(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Madder Bomber\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry = Battlecry(Damage(1), CharacterSelector( players = BothPlayer(), picker = RandomPicker(6))))\n\n    def create_minion (self, player) :\n        return Minion(5, 4)"], "gcnn": "class MadderBomber(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Madder Bomber\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry = Battlecry(Damage(1), CharacterSelector( players = BothPlayer(), players = RandomPicker(6))))\n\n    def create_minion (self, player) :\n        return Minion(5, 4)", "nl2code": "class MadderBomber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Madder Bomber', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(1),\n            CharacterSelector(None, EnemyPlayer(), RandomPicker(2))))\n\n    def create_minion(self, player):\n        return Minion(5, 4)", "grade-gcnn": 4, "grade-nl2code": 3, "rougel-gcnn": 0.987, "rougel-nl2code": 0.923, "bleu-gcnn": 0.967, "bleu-nl2code": 0.829, "chrf-gcnn": 0.972, "chrf-nl2code": 0.867, "meteor-gcnn": 0.987, "meteor-nl2code": 0.91, "codebleu-gcnn": 0.596, "codebleu-nl2code": 0.83, "ruby-gcnn": 0.995, "ruby-nl2code": 0.901}, {"snippet": ["class MiniMage(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Mini-Mage\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC)\n\n    def create_minion (self, player) :\n        return Minion(4, 1, stealth = True, spell_damage = 1)"], "gcnn": "class MiniMage(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Mini-Mage\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC)\n\n    def create_minion (self, player) :\n        return Minion(4, 1, stealth = True)", "nl2code": "class Mini-Mage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mini-Mage', 4, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(4, 1, stealth=True, auras=[Buff(Stealth())])", "grade-gcnn": 3, "grade-nl2code": 3, "rougel-gcnn": 0.965, "rougel-nl2code": 0.905, "bleu-gcnn": 0.917, "bleu-nl2code": 0.804, "chrf-gcnn": 0.929, "chrf-nl2code": 0.864, "meteor-gcnn": 0.927, "meteor-nl2code": 0.89, "codebleu-gcnn": 0.857, "codebleu-nl2code": 0.518, "ruby-gcnn": 0.962, "ruby-nl2code": 0.851}, {"snippet": ["class PilotedSkyGolem(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Piloted Sky Golem\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type = MINION_TYPE.MECH)\n\n    def create_minion (self, player) :\n        return Minion(6, 4, deathrattle = Deathrattle(Summon(CardQuery( conditions = [ManaCost(4), IsMinion()])), PlayerSelector()))"], "gcnn": "class PilotedSkyGolem(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Piloted Sky Golem\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type = MINION_TYPE.MECH)\n\n    def create_minion (self, player) :\n        return Minion(6, 4, deathrattle = Deathrattle(Summon(CardQuery( player = ManaCost(4))), PlayerSelector()))", "nl2code": "class PilotedSky(MinionCard):\n\n    def __init__(self):\n        super().__init__('Piloted Sky', 6, CHARACTER_CLASS.ALL, CARD_RARITY\n            .EPIC, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(6, 4, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector(\n            EnemyPlayer())))", "grade-gcnn": 4, "grade-nl2code": 2, "rougel-gcnn": 0.948, "rougel-nl2code": 0.956, "bleu-gcnn": 0.865, "bleu-nl2code": 0.885, "chrf-gcnn": 0.913, "chrf-nl2code": 0.92, "meteor-gcnn": 0.82, "meteor-nl2code": 0.898, "codebleu-gcnn": 0.819, "codebleu-nl2code": 0.902, "ruby-gcnn": 0.907, "ruby-nl2code": 0.961}, {"snippet": ["class ScarletPurifier(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Scarlet Purifier\", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, battlecry = Battlecry(Damage(2), MinionSelector(MinionHasDeathrattle(), BothPlayer())))\n\n    def create_minion (self, player) :\n        return Minion(4, 3)"], "gcnn": "class ScarletPurifier(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Scarlet Purifier\", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, battlecry = Battlecry(Damage(2), CharacterSelector( players = BothPlayer())))\n\n    def create_minion (self, player) :\n        return Minion(4, 3)", "nl2code": "class ScarletPurifier(MinionCard):\n\n    def __init__(self):\n        super().__init__('Scarlet Purifier', 3, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(2),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)", "grade-gcnn": 3, "grade-nl2code": 2, "rougel-gcnn": 0.932, "rougel-nl2code": 0.902, "bleu-gcnn": 0.866, "bleu-nl2code": 0.848, "chrf-gcnn": 0.883, "chrf-nl2code": 0.846, "meteor-gcnn": 0.859, "meteor-nl2code": 0.942, "codebleu-gcnn": 0.852, "codebleu-nl2code": 0.872, "ruby-gcnn": 0.884, "ruby-nl2code": 0.838}, {"snippet": ["class SiltfinSpiritwalker(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Siltfin Spiritwalker\", 4, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC, minion_type = MINION_TYPE.MURLOC, overload = 1)\n\n    def create_minion (self, player) :\n        return Minion(2, 5, effects = [Effect(MinionDied(IsType(MINION_TYPE.MURLOC)), ActionTag(Draw(), PlayerSelector()))])"], "gcnn": "class SiltfinSpiritwalker(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Siltfin Spiritwalker\", 4, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC, minion_type = MINION_TYPE.MURLOC)\n\n    def create_minion (self, player) :\n        return Minion(2, 5, effects = [Buff(Charge())])", "nl2code": "class SiltfinSpiritwalker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Siltfin Spiritwalker', 4, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(2, 5, effects=[Effect(MinionSummoned(player=\n            BothPlayer()), ActionTag(Give(Aura(ChangeAttack(1),\n            CardSelector())), RandomPicker()))])", "grade-gcnn": 2, "grade-nl2code": 1, "rougel-gcnn": 0.818, "rougel-nl2code": 0.823, "bleu-gcnn": 0.632, "bleu-nl2code": 0.716, "chrf-gcnn": 0.745, "chrf-nl2code": 0.787, "meteor-gcnn": 0.58, "meteor-nl2code": 0.764, "codebleu-gcnn": 0.626, "codebleu-nl2code": 0.791, "ruby-gcnn": 0.762, "ruby-nl2code": 0.767}, {"snippet": ["class TinkertownTechnician(MinionCard ) : \n    def __init__ (self) :\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        super().__init__(\"Tinkertown Technician\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry = Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector(), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))), value = 0)), Battlecry(AddCard(CardQuery( source = CARD_SOURCE.LIST, source_list = spare_part_list)), PlayerSelector(), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))), value = 0)))\n\n    def create_minion (self, player) :\n        return Minion(3, 3)"], "gcnn": "class TinkertownTechnician(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Tinkertown Technician\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry = Battlecry(DecreaseDurability(), WeaponSelector()))\n\n    def create_minion (self, player) :\n        return Minion(3, 3)", "nl2code": "class TinkertownTechnician(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkertown Technician', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (2)), Buff(ChangeHealth(3))]), PlayerSelector(), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.MECH))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(3, 3)", "grade-gcnn": 1, "grade-nl2code": 2, "rougel-gcnn": 0.539, "rougel-nl2code": 0.755, "bleu-gcnn": 0.186, "bleu-nl2code": 0.523, "chrf-gcnn": 0.429, "chrf-nl2code": 0.605, "meteor-gcnn": 0.357, "meteor-nl2code": 0.617, "codebleu-gcnn": 0.295, "codebleu-nl2code": 0.549, "ruby-gcnn": 0.376, "ruby-nl2code": 0.624}, {"snippet": ["class Voljin(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Vol'jin\", 5, CHARACTER_CLASS.PRIEST, CARD_RARITY.LEGENDARY, battlecry = Battlecry(SwapStats(\"health\", \"health\", True), MinionSelector( players = BothPlayer(), picker = UserPicker())))\n\n    def create_minion (self, player) :\n        return Minion(6, 2)"], "gcnn": "class Voljin(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Vol'jin\", 5, CHARACTER_CLASS.PRIEST, CARD_RARITY.LEGENDARY, target_func = hearthbreaker.targeting.find_minion_spell_target)\n\n    def create_minion (self, player) :\n        return Minion(6, 2)", "nl2code": "class Vol'jin(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Vol'jin\", 6, CHARACTER_CLASS.PRIEST, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(SwapStats('health', 'attack',\n            False), MinionSelector(players=EnemyPlayer(), picker=UserPicker()))\n            )\n\n    def create_minion(self, player):\n        return Minion(6, 2)", "grade-gcnn": 2, "grade-nl2code": 3, "rougel-gcnn": 0.717, "rougel-nl2code": 0.932, "bleu-gcnn": 0.517, "bleu-nl2code": 0.843, "chrf-gcnn": 0.646, "chrf-nl2code": 0.883, "meteor-gcnn": 0.539, "meteor-nl2code": 0.94, "codebleu-gcnn": 0.579, "codebleu-nl2code": 0.51, "ruby-gcnn": 0.715, "ruby-nl2code": 0.921}, {"snippet": ["class DeathsBite(WeaponCard ) : \n    def __init__ (self) :\n        super().__init__(\"Death's Bite\", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)\n\n    def create_weapon (self, player) :\n        return Weapon(4, 2, deathrattle = Deathrattle(Damage(1), MinionSelector( players = BothPlayer())))"], "gcnn": "class DeathsBite(WeaponCard ) : \n    def __init__ (self) :\n        super().__init__(\"Death's Bite\", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)\n\n    def create_weapon (self, player) :\n        return Weapon(4, 2, effects = [Effect(CardUsed(IsHero()), ActionTag(Damage(1), CharacterSelector( players = EnemyPlayer(), picker = RandomPicker(1))))])", "nl2code": "class hunterBite(WeaponCard):\n\n    def __init__(self):\n        super().__init__(\"Gallywix's Bite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(4, 2, deathrattle=Deathrattle(Damage(1),\n            MinionSelector(condition=EnemyPlayer())), taunt=True)", "grade-gcnn": 3, "grade-nl2code": 2, "rougel-gcnn": 0.817, "rougel-nl2code": 0.92, "bleu-gcnn": 0.651, "bleu-nl2code": 0.823, "chrf-gcnn": 0.809, "chrf-nl2code": 0.866, "meteor-gcnn": 0.762, "meteor-nl2code": 0.925, "codebleu-gcnn": 0.851, "codebleu-nl2code": 0.895, "ruby-gcnn": 0.723, "ruby-nl2code": 0.962}, {"snippet": ["class Maexxna(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Maexxna\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type = MINION_TYPE.BEAST)\n\n    def create_minion (self, player) :\n        return Minion(2, 8, effects = [Effect(DidDamage(), ActionTag(Kill(), TargetSelector(IsMinion())))])"], "gcnn": "class Maexxna(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Maexxna\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type = MINION_TYPE.BEAST)\n\n    def create_minion (self, player) :\n        return Minion(2, 8, effects = [Effect(DidDamage(), ActionTag(Kill(), TargetSelector(IsMinion())))])", "nl2code": "class Maexxna(MinionCard):\n\n    def __init__(self):\n        super().__init__('Maexxna', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 8, effects=[Effect(DidDamage(), ActionTag(Kill(),\n            TargetSelector(IsMinion())))])", "grade-gcnn": 4, "grade-nl2code": 4, "rougel-gcnn": 1.0, "rougel-nl2code": 1.0, "bleu-gcnn": 1.0, "bleu-nl2code": 1.0, "chrf-gcnn": 1.0, "chrf-nl2code": 0.973, "meteor-gcnn": 1.0, "meteor-nl2code": 1.0, "codebleu-gcnn": 1.0, "codebleu-nl2code": 0.981, "ruby-gcnn": 1.0, "ruby-nl2code": 1.0}, {"snippet": ["class SludgeBelcher(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Sludge Belcher\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion (self, player) :\n        return Minion(3, 5, taunt = True, deathrattle = Deathrattle(Summon(Slime()), PlayerSelector()))"], "gcnn": "class SludgeBelcher(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Sludge Belcher\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion (self, player) :\n        return Minion(3, 5, taunt = True)", "nl2code": "class SludgeBelcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sludge Belcher', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True, taunt=True)", "grade-gcnn": 2, "grade-nl2code": 2, "rougel-gcnn": 0.864, "rougel-nl2code": 0.868, "bleu-gcnn": 0.719, "bleu-nl2code": 0.749, "chrf-gcnn": 0.788, "chrf-nl2code": 0.759, "meteor-gcnn": 0.654, "meteor-nl2code": 0.668, "codebleu-gcnn": 0.676, "codebleu-nl2code": 0.423, "ruby-gcnn": 0.867, "ruby-nl2code": 0.902}, {"snippet": ["class Voidcaller(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Voidcaller\", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type = MINION_TYPE.DEMON)\n\n    def create_minion (self, player) :\n        return Minion(3, 4, deathrattle = Deathrattle(Summon(CardQuery( conditions = [IsType(MINION_TYPE.DEMON)], source = CARD_SOURCE.MY_HAND)), PlayerSelector()))"], "gcnn": "class Voidcaller(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Voidcaller\", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type = MINION_TYPE.DEMON)\n\n    def create_minion (self, player) :\n        return Minion(3, 4, deathrattle = Deathrattle(Summon(Nerubian()), PlayerSelector()))", "nl2code": "class Voidcaller(MinionCard):\n\n    def __init__(self):\n        super().__init__('Voidcaller', 4, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(3, 4, deathrattle=Deathrattle(AddCard(CardQuery(\n            conditions=[IsType(MINION_TYPE.MECH)])), PlayerSelector()))", "grade-gcnn": 2, "grade-nl2code": 3, "rougel-gcnn": 0.875, "rougel-nl2code": 0.936, "bleu-gcnn": 0.739, "bleu-nl2code": 0.858, "chrf-gcnn": 0.797, "chrf-nl2code": 0.859, "meteor-gcnn": 0.629, "meteor-nl2code": 0.878, "codebleu-gcnn": 0.709, "codebleu-nl2code": 0.825, "ruby-gcnn": 0.847, "ruby-nl2code": 0.908}, {"snippet": ["class Alexstrasza(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Alexstrasza\", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type = MINION_TYPE.DRAGON, battlecry = Battlecry(SetHealth(15), HeroSelector( players = BothPlayer(), picker = UserPicker())))\n\n    def create_minion (self, player) :\n        return Minion(8, 8)"], "gcnn": "class Alexstrasza(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Alexstrasza\", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type = MINION_TYPE.DRAGON)\n\n    def create_minion (self, player) :\n        return Minion(8, 8)", "nl2code": "class Alexstrasza(MinionCard):\n\n    def __init__(self):\n        super().__init__('Alexstrasza', 9, CHARACTER_CLASS.ALL, CARD_RARITY\n            .LEGENDARY, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry\n            (Summon(remainingremaining()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(8, 8)", "grade-gcnn": 2, "grade-nl2code": 3, "rougel-gcnn": 0.788, "rougel-nl2code": 0.857, "bleu-gcnn": 0.567, "bleu-nl2code": 0.748, "chrf-gcnn": 0.724, "chrf-nl2code": 0.798, "meteor-gcnn": 0.641, "meteor-nl2code": 0.778, "codebleu-gcnn": 0.594, "codebleu-nl2code": 0.775, "ruby-gcnn": 0.741, "ruby-nl2code": 0.821}, {"snippet": ["class ArcaneGolem(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Arcane Golem\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry = Battlecry(GiveManaCrystal(), PlayerSelector( players = EnemyPlayer())))\n\n    def create_minion (self, player) :\n        return Minion(4, 2, charge = True)"], "gcnn": "class ArcaneGolem(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Arcane Golem\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry = Battlecry(AddCard(Bananas()), PlayerSelector()), charge = True)\n\n    def create_minion (self, player) :\n        return Minion(4, 2)", "nl2code": "class ArcaneGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Arcane Golem', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(AddCard(ManaMana(),\n            PlayerSelector()), PlayerSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)", "grade-gcnn": 2, "grade-nl2code": 3, "rougel-gcnn": 0.851, "rougel-nl2code": 0.911, "bleu-gcnn": 0.807, "bleu-nl2code": 0.828, "chrf-gcnn": 0.844, "chrf-nl2code": 0.873, "meteor-gcnn": 0.898, "meteor-nl2code": 0.917, "codebleu-gcnn": 0.825, "codebleu-nl2code": 0.857, "ruby-gcnn": 0.859, "ruby-nl2code": 0.768}, {"snippet": ["class BaineBloodhoof(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Baine Bloodhoof\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, False)\n\n    def create_minion (self, player) :\n        return Minion(4, 5)"], "gcnn": "class BaineBloodhoof(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Baine Bloodhoof\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\n\n    def create_minion (self, player) :\n        return Minion(4, 5)", "nl2code": "class BaineBloodhoof(MinionCard):\n\n    def __init__(self):\n        super().__init__('Baine Bloodhoof', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(4, 5, deathrattle=Deathrattle(Summon(Thaddius()),\n            PlayerSelector(), InGraveyard(Feugen())))", "grade-gcnn": 3, "grade-nl2code": 2, "rougel-gcnn": 0.98, "rougel-nl2code": 0.787, "bleu-gcnn": 0.93, "bleu-nl2code": 0.631, "chrf-gcnn": 0.959, "chrf-nl2code": 0.841, "meteor-gcnn": 0.963, "meteor-nl2code": 0.812, "codebleu-gcnn": 0.878, "codebleu-nl2code": 0.786, "ruby-gcnn": 0.963, "ruby-nl2code": 0.758}, {"snippet": ["class BladeFlurry(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Blade Flurry\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        if  player.weapon is not None : \n            \n            attack_power = player.effective_spell_damage(player.hero.calculate_attack())\n            player.weapon.destroy()\n            for minion in copy.copy(game.other_player.minions): \n                minion.damage(attack_power, self)\n \n            game.other_player.hero.damage(attack_power, self)"], "gcnn": "class BladeFlurry(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Blade Flurry\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        \n        targets = copy.copy(game.other_player.minions)\n        self.target.extend(game.other_player.weapon)\n        for minion in copy.random_choice(targets): \n            player.damage(player.effective_spell_damage(game.calculate_attack()), self)", "nl2code": "class BladeFlurry(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blade Flurry', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.append(player.hero)\n        for minion in targets:\n            minion.damage(player.hero, game)", "grade-gcnn": 2, "grade-nl2code": 2, "rougel-gcnn": 0.732, "rougel-nl2code": 0.731, "bleu-gcnn": 0.687, "bleu-nl2code": 0.6, "chrf-gcnn": 0.75, "chrf-nl2code": 0.618, "meteor-gcnn": 0.691, "meteor-nl2code": 0.585, "codebleu-gcnn": 0.702, "codebleu-nl2code": 0.562, "ruby-gcnn": 0.923, "ruby-nl2code": 0.861}, {"snippet": ["class Brawl(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Brawl\", 5, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC)\n\n    def can_use (self, player, game) :\n        return super().can_use(player, game) and len(player.minions) +len(player.opponent.minions) >= 2\n\n    def use (self, player, game) :\n        super().use(player, game)\n        \n        minions = copy.copy(player.minions)\n        minions.extend(game.other_player.minions)\n        if  len(minions) > 1 : \n            \n            survivor = game.random_choice(minions)\n            for minion in minions: \n                if  minion is not survivor : \n                    minion.die(self)"], "gcnn": "class Brawl(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Brawl\", 5, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        self.target.die(self)", "nl2code": "class Brawl(SpellCard):\n\n    def __init__(self):\n        super().__init__('Brawl', 5, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(player.minions)\n        for minion in targets:\n            minion.die(self)", "grade-gcnn": 1, "grade-nl2code": 2, "rougel-gcnn": 0.57, "rougel-nl2code": 0.678, "bleu-gcnn": 0.228, "bleu-nl2code": 0.418, "chrf-gcnn": 0.412, "chrf-nl2code": 0.55, "meteor-gcnn": 0.302, "meteor-nl2code": 0.436, "codebleu-gcnn": 0.221, "codebleu-nl2code": 0.38, "ruby-gcnn": 0.56, "ruby-nl2code": 0.711}, {"snippet": ["class Conceal(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Conceal\", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        for minion in player.minions: \n            if   not minion.stealth : \n                minion.add_buff(BuffUntil(Stealth(), TurnStarted()))"], "gcnn": "class Conceal(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Conceal\", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        for minion in targets: \n            minion.change_temp_attack(1)", "nl2code": "class ConcealSpell(SpellCard):\n\n    def __init__(self):\n        super().__init__('Conceal', 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)", "grade-gcnn": 2, "grade-nl2code": 2, "rougel-gcnn": 0.83, "rougel-nl2code": 0.774, "bleu-gcnn": 0.671, "bleu-nl2code": 0.559, "chrf-gcnn": 0.731, "chrf-nl2code": 0.635, "meteor-gcnn": 0.545, "meteor-nl2code": 0.466, "codebleu-gcnn": 0.639, "codebleu-nl2code": 0.483, "ruby-gcnn": 0.787, "ruby-nl2code": 0.742}, {"snippet": ["class DefenderMinion(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Defender\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\n\n    def create_minion (self, p) :\n        return Minion(2, 1)"], "gcnn": "class DefenderMinion(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Defender\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\n\n    def create_minion (self, player) :\n        return Minion(2, 1)", "nl2code": "class Defender(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, False)\n\n    def create_minion(self, p):\n        return Minion(2, 1)", "grade-gcnn": 4, "grade-nl2code": 4, "rougel-gcnn": 0.98, "rougel-nl2code": 0.97, "bleu-gcnn": 0.946, "bleu-nl2code": 0.9, "chrf-gcnn": 0.978, "chrf-nl2code": 0.889, "meteor-gcnn": 0.98, "meteor-nl2code": 0.974, "codebleu-gcnn": 0.99, "codebleu-nl2code": 0.883, "ruby-gcnn": 0.994, "ruby-nl2code": 0.883}, {"snippet": ["class Doomguard(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Doomguard\", 5, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, minion_type = MINION_TYPE.DEMON, battlecry = Battlecry(Discard( amount = 2), PlayerSelector()))\n\n    def create_minion (self, player) :\n        return Minion(5, 7, charge = True)"], "gcnn": "class Doomguard(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Doomguard\", 5, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, minion_type = MINION_TYPE.DEMON)\n\n    def create_minion (self, player) :\n        return Minion(5, 7, battlecry = Deathrattle(Summon(Thaddius(), 5), PlayerSelector()), effects = [Deathrattle(Remove(), SelfSelector())])", "nl2code": "class Doomguard(MinionCard):\n\n    def __init__(self):\n        super().__init__('Doomguard', 5, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Draw(5), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 7, charge=True)", "grade-gcnn": 1, "grade-nl2code": 3, "rougel-gcnn": 0.683, "rougel-nl2code": 0.959, "bleu-gcnn": 0.674, "bleu-nl2code": 0.915, "chrf-gcnn": 0.828, "chrf-nl2code": 0.914, "meteor-gcnn": 0.713, "meteor-nl2code": 0.948, "codebleu-gcnn": 0.794, "codebleu-nl2code": 0.864, "ruby-gcnn": 0.716, "ruby-nl2code": 0.964}, {"snippet": ["class EarthElemental(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Earth Elemental\", 5, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC, overload = 3)\n\n    def create_minion (self, player) :\n        return Minion(7, 8, taunt = True)"], "gcnn": "class EarthElemental(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Earth Elemental\", 5, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC, overload = 3)\n\n    def create_minion (self, player) :\n        return Minion(7, 8, taunt = True, overload = 3)", "nl2code": "class EarthElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Earth Elemental', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, buffs=[Buff(ManaChange(Count(MinionSelector(\n            None, BothPlayer())), -1))])\n\n    def create_minion(self, player):\n        return Minion(7, 8, taunt=True)", "grade-gcnn": 3, "grade-nl2code": 2, "rougel-gcnn": 0.967, "rougel-nl2code": 0.8, "bleu-gcnn": 0.921, "bleu-nl2code": 0.648, "chrf-gcnn": 0.984, "chrf-nl2code": 0.853, "meteor-gcnn": 0.97, "meteor-nl2code": 0.891, "codebleu-gcnn": 0.918, "codebleu-nl2code": 0.854, "ruby-gcnn": 0.956, "ruby-nl2code": 0.665}, {"snippet": ["class ExplosiveTrap(SecretCard ) : \n    def __init__ (self) :\n        super().__init__(\"Explosive Trap\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)\n\n    def activate (self, player) :\n        player.opponent.bind(\"character attack\", self._reveal)\n\n    def deactivate (self, player) :\n        player.opponent.unbind(\"character attack\", self._reveal)\n\n    def _reveal (self, attacker, target) :\n        if  isinstance(target, Hero) : \n            \n            game = attacker.player.game\n            \n            enemies = copy.copy(game.current_player.minions)\n            enemies.append(game.current_player.hero)\n            for enemy in enemies: \n                enemy.damage(2, None)\n \n            game.check_delayed()\n            super().reveal()"], "gcnn": "class ExplosiveTrap(SecretCard ) : \n    def __init__ (self) :\n        super().__init__(\"Explosive Trap\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)\n\n    def activate (self, player) :\n        player.game.current_player.bind(\"character attack\", self._reveal)\n\n    def deactivate (self, player) :\n        player.game.current_player.unbind(\"character attack\", self._reveal)\n\n    def deactivate (self, player) :\n        player.game.current_player.damage(player.effective_spell_damage(2), self)", "nl2code": "class ExplosiveTrap(SecretCard):\n\n    def __init__(self):\n        super().__init__('Explosive Trap', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('character_attack', self._reveal)\n\n    def _reveal(self, minion):\n        minion.damage(4, None)\n        super().reveal()", "grade-gcnn": 2, "grade-nl2code": 2, "rougel-gcnn": 0.738, "rougel-nl2code": 0.734, "bleu-gcnn": 0.541, "bleu-nl2code": 0.533, "chrf-gcnn": 0.666, "chrf-nl2code": 0.631, "meteor-gcnn": 0.48, "meteor-nl2code": 0.522, "codebleu-gcnn": 0.448, "codebleu-nl2code": 0.459, "ruby-gcnn": 0.801, "ruby-nl2code": 0.791}, {"snippet": ["class FlameOfAzzinoth(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Flame of Azzinoth\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)\n\n    def create_minion (self, player) :\n        return Minion(2, 1)"], "gcnn": "class FlameOfAzzinoth(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Flame of Azzinoth\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)\n\n    def create_minion (self, player) :\n        return Minion(2, 1)", "nl2code": "class FlameOfAzzinoth(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flame of Azzinoth', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(2, 1)", "grade-gcnn": 4, "grade-nl2code": 4, "rougel-gcnn": 1.0, "rougel-nl2code": 1.0, "bleu-gcnn": 1.0, "bleu-nl2code": 1.0, "chrf-gcnn": 1.0, "chrf-nl2code": 0.96, "meteor-gcnn": 1.0, "meteor-nl2code": 1.0, "codebleu-gcnn": 1.0, "codebleu-nl2code": 0.979, "ruby-gcnn": 1.0, "ruby-nl2code": 1.0}, {"snippet": ["class Gnoll(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Gnoll\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)\n\n    def create_minion (self, player) :\n        return Minion(2, 2, taunt = True)"], "gcnn": "class Gnoll(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Gnoll\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)\n\n    def create_minion (self, player) :\n        return Minion(2, 2, taunt = True)", "nl2code": "class Gnoll(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnoll', 2, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)", "grade-gcnn": 4, "grade-nl2code": 4, "rougel-gcnn": 1.0, "rougel-nl2code": 1.0, "bleu-gcnn": 1.0, "bleu-nl2code": 1.0, "chrf-gcnn": 1.0, "chrf-nl2code": 0.958, "meteor-gcnn": 1.0, "meteor-nl2code": 1.0, "codebleu-gcnn": 1.0, "codebleu-nl2code": 0.98, "ruby-gcnn": 1.0, "ruby-nl2code": 1.0}, {"snippet": ["class HolyWrath(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Holy Wrath\", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, target_func = hearthbreaker.targeting.find_spell_target)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        \n        fatigue = False\n        if  player.deck.left == 0 : \n            \n            fatigue = True\n\n        player.draw()\n        if   not fatigue : \n            \n            cost = player.hand[-1].mana\n            self.target.damage(player.effective_spell_damage(cost), self)"], "gcnn": "class HolyWrath(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Holy Wrath\", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        for minion in game.copy(player.minions): \n            minion.extend(len(player.minions))", "nl2code": "class HolyWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Wrath', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.silence('card_drawn', reduce_cost)\n        player.draw()", "grade-gcnn": 1, "grade-nl2code": 2, "rougel-gcnn": 0.688, "rougel-nl2code": 0.688, "bleu-gcnn": 0.46, "bleu-nl2code": 0.463, "chrf-gcnn": 0.519, "chrf-nl2code": 0.526, "meteor-gcnn": 0.521, "meteor-nl2code": 0.432, "codebleu-gcnn": 0.329, "codebleu-nl2code": 0.275, "ruby-gcnn": 0.747, "ruby-nl2code": 0.72}, {"snippet": ["class Infernal(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Infernal\", 6, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, False, minion_type = MINION_TYPE.DEMON)\n\n    def create_minion (self, player) :\n        return Minion(6, 6)"], "gcnn": "class Infernal(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Infernal\", 6, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type = MINION_TYPE.DEMON)\n\n    def create_minion (self, player) :\n        return Minion(6, 6)", "nl2code": "class Infernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(6, 6)", "grade-gcnn": 4, "grade-nl2code": 4, "rougel-gcnn": 0.982, "rougel-nl2code": 1.0, "bleu-gcnn": 0.949, "bleu-nl2code": 1.0, "chrf-gcnn": 0.967, "chrf-nl2code": 0.964, "meteor-gcnn": 0.966, "meteor-nl2code": 1.0, "codebleu-gcnn": 0.892, "codebleu-nl2code": 0.981, "ruby-gcnn": 0.967, "ruby-nl2code": 1.0}, {"snippet": ["class KirinTorMage(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Kirin Tor Mage\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE, battlecry = Battlecry(GiveAura([AuraUntil(ManaChange(-100), CardSelector( condition = IsSecret()), CardPlayed(IsSecret()))]), PlayerSelector()))\n\n    def create_minion (self, player) :\n        return Minion(4, 3)"], "gcnn": "class KirinTorMage(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Kirin Tor Mage\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE, battlecry = Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion (self, player) :\n        return Minion(4, 3)", "nl2code": "class KirinTorMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kirin Tor Mage', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.RARE, battlecry=Battlecry(GiveAura(AuraUntil(\n            ManaChange(-1), CardSelector(condition=IsMinion()), TurnEnded()\n            )), MinionSelector(players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)", "grade-gcnn": 2, "grade-nl2code": 3, "rougel-gcnn": 0.788, "rougel-nl2code": 0.889, "bleu-gcnn": 0.578, "bleu-nl2code": 0.803, "chrf-gcnn": 0.718, "chrf-nl2code": 0.829, "meteor-gcnn": 0.652, "meteor-nl2code": 0.922, "codebleu-gcnn": 0.358, "codebleu-nl2code": 0.503, "ruby-gcnn": 0.718, "ruby-nl2code": 0.879}, {"snippet": ["class Lightwarden(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Lightwarden\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion (self, player) :\n        return Minion(1, 2, effects = [Effect(CharacterHealed( player = BothPlayer()), ActionTag(Give(ChangeAttack(2)), SelfSelector()))])"], "gcnn": "class Lightwarden(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Lightwarden\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion (self, player) :\n        return Minion(1, 2, effects = [Effect(SpellCast( player = EnemyPlayer()), ActionTag(Summon(Immune()), PlayerSelector()))])", "nl2code": "class Lightwarden(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwarden', 1, CHARACTER_CLASS.ALL, CARD_RARITY\n            .RARE)\n\n    def create_minion(self, player):\n        return Minion(1, 2, effects=[Effect(CharacterDamaged(condition=\n            IsMinion()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])", "grade-gcnn": 2, "grade-nl2code": 3, "rougel-gcnn": 0.916, "rougel-nl2code": 0.94, "bleu-gcnn": 0.809, "bleu-nl2code": 0.884, "chrf-gcnn": 0.822, "chrf-nl2code": 0.866, "meteor-gcnn": 0.901, "meteor-nl2code": 0.936, "codebleu-gcnn": 0.854, "codebleu-nl2code": 0.962, "ruby-gcnn": 0.956, "ruby-nl2code": 0.985}, {"snippet": ["class ManaWraith(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Mana Wraith\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion (self, player) :\n        return Minion(2, 2, auras = [Aura(ManaChange(1), CardSelector(BothPlayer(), IsMinion()))])"], "gcnn": "class ManaWraith(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Mana Wraith\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion (self, player) :\n        return Minion(2, 2, effects = [Effect(SpellCast(), ActionTag(DecreaseDurability(), WeaponSelector()))])", "nl2code": "class ManaWraith(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wraith', 2, CHARACTER_CLASS.ALL, CARD_RARITY\n            .RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 2, auras=[Aura(ManaChange(5), CardSelector(\n            condition=IsMinion()))])", "grade-gcnn": 2, "grade-nl2code": 3, "rougel-gcnn": 0.863, "rougel-nl2code": 0.94, "bleu-gcnn": 0.754, "bleu-nl2code": 0.88, "chrf-gcnn": 0.778, "chrf-nl2code": 0.888, "meteor-gcnn": 0.86, "meteor-nl2code": 0.823, "codebleu-gcnn": 0.858, "codebleu-nl2code": 0.838, "ruby-gcnn": 0.922, "ruby-nl2code": 0.949}, {"snippet": ["class Misdirection(SecretCard ) : \n    def __init__ (self) :\n        super().__init__(\"Misdirection\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def activate (self, player) :\n        player.opponent.bind(\"character attack\", self._reveal)\n\n    def deactivate (self, player) :\n        player.opponent.unbind(\"character attack\", self._reveal)\n\n    def _reveal (self, character, target) :\n        if  isinstance(target, Hero) and  not character.removed : \n            \n            game = character.player.game\n            \n            possibilities = copy.copy(game.current_player.minions)\n            possibilities.extend(game.other_player.minions)\n            possibilities.append(game.current_player.hero)\n            possibilities.append(game.other_player.hero)\n            possibilities.remove(character.current_target)\n            \n            character.current_target = game.random_choice(possibilities)\n            super().reveal()"], "gcnn": "class Misdirection(SecretCard ) : \n    def __init__ (self) :\n        super().__init__(\"Misdirection\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def activate (self, player) :\n        player.game.current_player.bind(\"character attack\", self._reveal)\n\n    def deactivate (self, player) :\n        player.game.current_player.unbind(\"character attack\", self._reveal)\n\n    def deactivate (self, player) :\n        player.game.current_player.unbind(\"character attack\", self._reveal)", "nl2code": "class Misdirection(SecretCard):\n\n    def __init__(self):\n        super().__init__('Misdirection', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.RARE)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_died', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_died', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_died', self._reveal)", "grade-gcnn": 1, "grade-nl2code": 1, "rougel-gcnn": 0.655, "rougel-nl2code": 0.626, "bleu-gcnn": 0.417, "bleu-nl2code": 0.372, "chrf-gcnn": 0.537, "chrf-nl2code": 0.472, "meteor-gcnn": 0.353, "meteor-nl2code": 0.323, "codebleu-gcnn": 0.333, "codebleu-nl2code": 0.329, "ruby-gcnn": 0.704, "ruby-nl2code": 0.699}, {"snippet": ["class NobleSacrifice(SecretCard ) : \n    def __init__ (self) :\n        super().__init__(\"Noble Sacrifice\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\n\n    def _reveal (self, attacker, target) :\n        \n        player = attacker.player.game.other_player\n        if  len(player.minions) < 7 and  not attacker.removed : \n            from hearthbreaker.cards.minions.paladin import DefenderMinion\n            \n            defender = DefenderMinion()\n            defender.summon(player, player.game, len(player.minions))\n            \n            attacker.current_target = player.minions[-1]\n            super().reveal()\n\n\n    def activate (self, player) :\n        player.opponent.bind(\"character attack\", self._reveal)\n\n    def deactivate (self, player) :\n        player.opponent.unbind(\"character attack\", self._reveal)"], "gcnn": "class NobleSacrifice(SecretCard ) : \n    def __init__ (self) :\n        super().__init__(\"Noble Sacrifice\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\n\n    def activate (self, player) :\n        player.game.current_player.bind(\"character attack\", self._reveal)\n\n    def deactivate (self, player) :\n        player.game.current_player.unbind(\"character attack\", self._reveal)\n\n    def deactivate (self, player) :\n        player.game.current_player.change_temp_attack(2)", "nl2code": "class NobleSacrifice(SecretCard):\n\n    def __init__(self):\n        super().__init__('Noble Sacrifice', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n        self.player = None\n\n    def _reveal(self, card, index):\n        if card.is_spell() and len(self.player.minions\n            ) < 7 and card.target and CARD_RARITY.target.is_minion():\n            self.player.add_effect(Buff(ManaChange(2)))\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('character_attack', self._reveal)\n        self.player = player\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('character_attack', self._reveal)\n        self.player = None", "grade-gcnn": 2, "grade-nl2code": 3, "rougel-gcnn": 0.615, "rougel-nl2code": 0.679, "bleu-gcnn": 0.434, "bleu-nl2code": 0.548, "chrf-gcnn": 0.579, "chrf-nl2code": 0.615, "meteor-gcnn": 0.477, "meteor-nl2code": 0.642, "codebleu-gcnn": 0.386, "codebleu-nl2code": 0.605, "ruby-gcnn": 0.742, "ruby-nl2code": 0.527}, {"snippet": ["class PowerOfTheWild(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Power of the Wild\", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        \n        option = player.agent.choose_option([LeaderOfThePack(), SummonPanther()], player)\n        option.use(player, game)"], "gcnn": "class PowerOfTheWild(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Power of the Wild\", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func = hearthbreaker.targeting.find_spell_target)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        self.target.change_attack(1)\n        self.target.increase_health(1)", "nl2code": "class PowerOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power of the Wild', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        from hearthbreaker.cards.minions.druid import Power\n        for minion in player.minions:\n            minion.increase_health(minion)", "grade-gcnn": 1, "grade-nl2code": 2, "rougel-gcnn": 0.759, "rougel-nl2code": 0.718, "bleu-gcnn": 0.646, "bleu-nl2code": 0.648, "chrf-gcnn": 0.673, "chrf-nl2code": 0.644, "meteor-gcnn": 0.565, "meteor-nl2code": 0.472, "codebleu-gcnn": 0.498, "codebleu-nl2code": 0.488, "ruby-gcnn": 0.601, "ruby-nl2code": 0.605}, {"snippet": ["class Redemption(SecretCard ) : \n    def __init__ (self) :\n        super().__init__(\"Redemption\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\n\n    def _reveal (self, minion, by) :\n        \n        resurrection = minion.card.summon(minion.player, minion.game, min(minion.index, len(minion.player.minions)))\n        if  resurrection : \n            \n            resurrection.health = 1\n            super().reveal()\n\n\n    def activate (self, player) :\n        player.bind(\"minion died\", self._reveal)\n\n    def deactivate (self, player) :\n        player.unbind(\"minion died\", self._reveal)"], "gcnn": "class Redemption(SecretCard ) : \n    def __init__ (self) :\n        super().__init__(\"Redemption\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\n\n    def activate (self, player) :\n        player.bind(\"minion died\", self._reveal)\n\n    def deactivate (self, player) :\n        player.game.current_player.unbind(\"character attack\", self._reveal)\n\n    def deactivate (self, player) :\n        player.unbind(\"minion died\", self._reveal)", "nl2code": "class Redemption(SecretCard):\n\n    def __init__(self):\n        super().__init__('Redemption', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, target):\n        if len(self.player.minions) < 7:\n            target = minion.copy(self.player.minions.minions)\n            target.change_attack(3)\n            target.increase_health(4)\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_died', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_died', self._reveal)", "grade-gcnn": 2, "grade-nl2code": 3, "rougel-gcnn": 0.724, "rougel-nl2code": 0.746, "bleu-gcnn": 0.581, "bleu-nl2code": 0.63, "chrf-gcnn": 0.677, "chrf-nl2code": 0.694, "meteor-gcnn": 0.638, "meteor-nl2code": 0.742, "codebleu-gcnn": 0.44, "codebleu-nl2code": 0.491, "ruby-gcnn": 0.827, "ruby-nl2code": 0.918}, {"snippet": ["class ShadowMadness(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Shadow Madness\", 4, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE, target_func = hearthbreaker.targeting.find_enemy_minion_spell_target, filter_func =  lambda  target : \n            target.calculate_attack() <= 3 and target.spell_targetable()\n)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        \n        minion = self.target.copy(player)\n        \n        minion.active = True\n        \n        minion.exhausted = False\n        self.target.remove_from_board()\n        minion.add_to_board(len(player.minions))\n        minion.add_buff(BuffUntil(Stolen(), TurnEnded()))\n\n    def can_use (self, player, game) :\n        return super().can_use(player, game) and len(player.minions) < 7"], "gcnn": "class ShadowMadness(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Shadow Madness\", 4, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE)\n\n    def can_use (self, player, game) :\n        return super().can_use(player, game) and len(game.other_player.minions) >= 3", "nl2code": "class ShadowMadness(SpellCard):\n\n    def __init__(self):\n        super().__init__('Shadow Madness', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        RARE = self.target.player(HasHealth(self.target, True))\n        self.target.add_buff(Buff(ChangeAttack(3)))\n        self.target.add_buff(Buff(ChangeAttack(3)))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7", "grade-gcnn": 1, "grade-nl2code": 1, "rougel-gcnn": 0.525, "rougel-nl2code": 0.77, "bleu-gcnn": 0.202, "bleu-nl2code": 0.62, "chrf-gcnn": 0.393, "chrf-nl2code": 0.661, "meteor-gcnn": 0.36, "meteor-nl2code": 0.701, "codebleu-gcnn": 0.211, "codebleu-nl2code": 0.454, "ruby-gcnn": 0.542, "ruby-nl2code": 0.877}, {"snippet": ["class SiphonSoul(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Siphon Soul\", 6, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, target_func = hearthbreaker.targeting.find_minion_spell_target)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        self.target.die(self)\n        player.hero.heal(player.effective_heal_power(3), self)"], "gcnn": "class SiphonSoul(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Siphon Soul\", 6, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, target_func = hearthbreaker.targeting.find_minion_spell_target)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        self.target.die(self)\n        player.hero.heal(player.effective_heal_power(3), self)", "nl2code": "class SiphonSoul(SpellCard):\n\n    def __init__(self):\n        super().__init__('Siphon Soul', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda character: \n            character.card.minion_type == MINION_TYPE.DEMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n        player.hero.heal(player.effective_heal_power(3), self)", "grade-gcnn": 4, "grade-nl2code": 3, "rougel-gcnn": 1.0, "rougel-nl2code": 0.915, "bleu-gcnn": 1.0, "bleu-nl2code": 0.826, "chrf-gcnn": 1.0, "chrf-nl2code": 0.923, "meteor-gcnn": 1.0, "meteor-nl2code": 0.965, "codebleu-gcnn": 1.0, "codebleu-nl2code": 0.55, "ruby-gcnn": 1.0, "ruby-nl2code": 0.904}, {"snippet": ["class Spellbender(SecretCard ) : \n    def __init__ (self) :\n        super().__init__(\"Spellbender\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)\n        \n        self.player = None\n\n    def _reveal (self, card, index) :\n        if  card.is_spell() and len(self.player.minions) < 7 and card.target and card.target.is_minion() : \n            SpellbenderMinion().summon(self.player, self.player.game, len(self.player.minions))\n            \n            card.target = self.player.minions[-1]\n            super().reveal()\n\n\n    def activate (self, player) :\n        player.game.current_player.bind(\"card played\", self._reveal)\n        \n        self.player = player\n\n    def deactivate (self, player) :\n        player.game.current_player.unbind(\"card played\", self._reveal)\n        \n        self.player = None"], "gcnn": "class Spellbender(SecretCard ) : \n    def __init__ (self) :\n        super().__init__(\"Spellbender\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)\n\n    def can_use (self, player, game) :\n        return super().can_use(player, game) and len(player.opponent.minions) +len(player.opponent.minions) >= minion_type\n\n    def use (self, player, game) :\n        player.draw()\n\n    def can_use (self, player, game) :\n        return super().can_use(player, game) and len(game.other_player.minions) >= 3", "nl2code": "class Spellbender(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbender', 0, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(1, 3)", "grade-gcnn": 2, "grade-nl2code": 2, "rougel-gcnn": 0.528, "rougel-nl2code": 0.371, "bleu-gcnn": 0.287, "bleu-nl2code": 0.041, "chrf-gcnn": 0.45, "chrf-nl2code": 0.26, "meteor-gcnn": 0.334, "meteor-nl2code": 0.141, "codebleu-gcnn": 0.41, "codebleu-nl2code": 0.091, "ruby-gcnn": 0.418, "ruby-nl2code": 0.379}, {"snippet": ["class SummoningPortal(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Summoning Portal\", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON)\n\n    def create_minion (self, player) :\n        return Minion(0, 4, auras = [Aura(ManaChange(-2, 1, minimum = 1), CardSelector( condition = IsMinion()))])"], "gcnn": "class SummoningPortal(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Summoning Portal\", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON)\n\n    def create_minion (self, player) :\n        return Minion(0, 4, auras = [Aura(ChangeAttack(2), SelfSelector())])", "nl2code": "class SummoningPortal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Summoning Portal', 4, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(0, 4, auras=[Aura(ManaChange(-1), CardSelector(\n            condition=IsSpell()))])", "grade-gcnn": 2, "grade-nl2code": 2, "rougel-gcnn": 0.886, "rougel-nl2code": 0.949, "bleu-gcnn": 0.727, "bleu-nl2code": 0.872, "chrf-gcnn": 0.819, "chrf-nl2code": 0.89, "meteor-gcnn": 0.679, "meteor-nl2code": 0.91, "codebleu-gcnn": 0.729, "codebleu-nl2code": 0.821, "ruby-gcnn": 0.864, "ruby-nl2code": 0.917}, {"snippet": ["class ThrallmarFarseer(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Thrallmar Farseer\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\n\n    def create_minion (self, player) :\n        return Minion(2, 3, windfury = True)"], "gcnn": "class ThrallmarFarseer(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Thrallmar Farseer\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\n\n    def create_minion (self, player) :\n        return Minion(2, 3, windfury = True)", "nl2code": "class ThrallmarFarseer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Thrallmar Farseer', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, windfury=True)", "grade-gcnn": 4, "grade-nl2code": 4, "rougel-gcnn": 1.0, "rougel-nl2code": 1.0, "bleu-gcnn": 1.0, "bleu-nl2code": 1.0, "chrf-gcnn": 1.0, "chrf-nl2code": 0.962, "meteor-gcnn": 1.0, "meteor-nl2code": 1.0, "codebleu-gcnn": 1.0, "codebleu-nl2code": 0.979, "ruby-gcnn": 1.0, "ruby-nl2code": 1.0}, {"snippet": ["class Upgrade(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Upgrade!\", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        from hearthbreaker.cards.weapons.warrior import HeavyAxe\n        if  player.weapon : \n            player.weapon.durability += 1\n            player.weapon.base_attack += 1\n\n        else : \n            heavy_axe = HeavyAxe().create_weapon(player)\n            heavy_axe.equip(player)"], "gcnn": "class Upgrade(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Upgrade!\", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE, target_func = hearthbreaker.targeting.find_minion_spell_target)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        self.target.silence()\n        self.target.draw()", "nl2code": "class Upgrade!(SpellCard):\n\n    def __init__(self):\n        super().__init__('Upgrade !', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = player.effective_spell_damage(game.random_amount(2, 1))\n        target = game.random_choice(targets)\n        target.heal(player.effective_spell_damage(1), self)", "grade-gcnn": 2, "grade-nl2code": 1, "rougel-gcnn": 0.685, "rougel-nl2code": 0.694, "bleu-gcnn": 0.496, "bleu-nl2code": 0.533, "chrf-gcnn": 0.545, "chrf-nl2code": 0.52, "meteor-gcnn": 0.438, "meteor-nl2code": 0.446, "codebleu-gcnn": 0.405, "codebleu-nl2code": 0.385, "ruby-gcnn": 0.567, "ruby-nl2code": 0.59}, {"snippet": ["class Wisp(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Wisp\", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\n\n    def create_minion (self, player) :\n        return Minion(1, 1)"], "gcnn": "class Wisp(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Wisp\", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\n\n    def create_minion (self, player) :\n        return Minion(1, 1)", "nl2code": "class Wisp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wisp', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False)\n\n    def create_minion(self, p):\n        return Minion(1, 1)", "grade-gcnn": 4, "grade-nl2code": 4, "rougel-gcnn": 1.0, "rougel-nl2code": 0.959, "bleu-gcnn": 1.0, "bleu-nl2code": 0.874, "chrf-gcnn": 1.0, "chrf-nl2code": 0.889, "meteor-gcnn": 1.0, "meteor-nl2code": 0.972, "codebleu-gcnn": 1.0, "codebleu-nl2code": 0.885, "ruby-gcnn": 1.0, "ruby-nl2code": 0.904}, {"snippet": ["class BlackWhelp(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Black Whelp\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, MINION_TYPE.DRAGON)\n\n    def create_minion (self, player) :\n        return Minion(2, 1)"], "gcnn": "class BlackWhelp(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Black Whelp\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type = MINION_TYPE.DRAGON)\n\n    def create_minion (self, player) :\n        return Minion(2, 1)", "nl2code": "class BlackWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Black Whelp', 1, CHARACTER_CLASS.ALL, CARD_RARITY\n            .COMMON, False, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)", "grade-gcnn": 4, "grade-nl2code": 3, "rougel-gcnn": 0.982, "rougel-nl2code": 0.965, "bleu-gcnn": 0.937, "bleu-nl2code": 0.892, "chrf-gcnn": 0.974, "chrf-nl2code": 0.921, "meteor-gcnn": 0.996, "meteor-nl2code": 0.978, "codebleu-gcnn": 0.92, "codebleu-nl2code": 0.892, "ruby-gcnn": 0.89, "ruby-nl2code": 0.875}, {"snippet": ["class DragonkinSorcerer(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Dragonkin Sorcerer\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type = MINION_TYPE.DRAGON)\n\n    def create_minion (self, player) :\n        return Minion(3, 5, effects = [Effect(SpellTargeted(), [ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector())])])"], "gcnn": "class DragonkinSorcerer(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Dragonkin Sorcerer\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type = MINION_TYPE.DRAGON)\n\n    def create_minion (self, player) :\n        return Minion(3, 5, effects = [Effect(MinionDied(), ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])", "nl2code": "class DragonkinSorcerer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonkin Sorcerer', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(3, 5, effects=[Effect(MinionDied(), ActionTag(Give([\n            Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])", "grade-gcnn": 2, "grade-nl2code": 3, "rougel-gcnn": 0.97, "rougel-nl2code": 0.97, "bleu-gcnn": 0.92, "bleu-nl2code": 0.92, "chrf-gcnn": 0.941, "chrf-nl2code": 0.92, "meteor-gcnn": 0.962, "meteor-nl2code": 0.962, "codebleu-gcnn": 0.946, "codebleu-nl2code": 0.94, "ruby-gcnn": 0.988, "ruby-nl2code": 0.988}, {"snippet": ["class HungryDragon(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Hungry Dragon\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type = MINION_TYPE.DRAGON, battlecry = Battlecry(Summon(CardQuery( conditions = [ManaCost(1), IsMinion()])), PlayerSelector(EnemyPlayer())))\n\n    def create_minion (self, player) :\n        return Minion(5, 6)"], "gcnn": "class HungryDragon(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Hungry Dragon\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type = MINION_TYPE.DRAGON)\n\n    def create_minion (self, player) :\n        return Minion(5, 6)", "nl2code": "class HungryDragon(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hungry Dragon', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(SpellCard(CardQuery(conditions=[ManaCost(6),\n            EnemyPlayer()]), MinionSelector(players=EnemyPlayer())),\n            PlayerSelector(players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 6)", "grade-gcnn": 2, "grade-nl2code": 2, "rougel-gcnn": 0.757, "rougel-nl2code": 0.889, "bleu-gcnn": 0.511, "bleu-nl2code": 0.766, "chrf-gcnn": 0.69, "chrf-nl2code": 0.88, "meteor-gcnn": 0.602, "meteor-nl2code": 0.899, "codebleu-gcnn": 0.54, "codebleu-nl2code": 0.862, "ruby-gcnn": 0.702, "ruby-nl2code": 0.784}, {"snippet": ["class SolemnVigil(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Solemn Vigil\", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, buffs = [Buff(ManaChange(Count(DeadMinionSelector( players = BothPlayer())), -1))])\n\n    def use (self, player, game) :\n        super().use(player, game)\n        for n in range(0, 2): \n            player.draw()"], "gcnn": "class SolemnVigil(SpellCard ) : \n    def __init__ (self) :\n        super().__init__(\"Solemn Vigil\", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, target_func = hearthbreaker.targeting.find_spell_target)\n\n    def use (self, player, game) :\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)", "nl2code": "class SolemnVigil(SpellCard):\n\n    def __init__(self):\n        super().__init__('Solemn Vigil', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.draw()", "grade-gcnn": 2, "grade-nl2code": 1, "rougel-gcnn": 0.701, "rougel-nl2code": 0.714, "bleu-gcnn": 0.556, "bleu-nl2code": 0.591, "chrf-gcnn": 0.67, "chrf-nl2code": 0.668, "meteor-gcnn": 0.58, "meteor-nl2code": 0.539, "codebleu-gcnn": 0.363, "codebleu-nl2code": 0.389, "ruby-gcnn": 0.626, "ruby-nl2code": 0.626}]